import{_ as t,c as i,o as n,ae as e}from"./chunks/framework.BlRNOFgT.js";const b=JSON.parse('{"title":"Rangkuman Materi IF3140 - Sistem Basis Data: Transactions","description":"","frontmatter":{},"headers":[],"relativePath":"system-database/transaction.md","filePath":"system-database/transaction.md"}'),r={name:"system-database/transaction.md"};function l(s,a,o,d,u,h){return n(),i("div",null,[...a[0]||(a[0]=[e('<h1 id="rangkuman-materi-if3140-sistem-basis-data-transactions" tabindex="-1">Rangkuman Materi IF3140 - Sistem Basis Data: Transactions <a class="header-anchor" href="#rangkuman-materi-if3140-sistem-basis-data-transactions" aria-label="Permalink to &quot;Rangkuman Materi IF3140 - Sistem Basis Data: Transactions&quot;">​</a></h1><h2 id="transaction-concept" tabindex="-1">Transaction Concept <a class="header-anchor" href="#transaction-concept" aria-label="Permalink to &quot;Transaction Concept&quot;">​</a></h2><ul><li><strong>Transaksi</strong> adalah unit eksekusi program yang mengakses dan mungkin memperbarui data.</li><li><strong>Contoh</strong>: Transfer dana $50 dari A ke B (read(A), A := A - 50, write(A), read(B), B := B + 50, write(B)).</li><li><strong>Isu utama</strong>: Kegagalan berbagai jenis dan eksekusi bersamaan (concurrent execution).</li></ul><h2 id="example-of-fund-transfer" tabindex="-1">Example of Fund Transfer <a class="header-anchor" href="#example-of-fund-transfer" aria-label="Permalink to &quot;Example of Fund Transfer&quot;">​</a></h2><ul><li><strong>Proses</strong>: read(A), A := A - 50, write(A), read(B), B := B + 50, write(B).</li><li><strong>Atomicity</strong>: Semua operasi harus tercermin di database atau tidak sama sekali; kegagalan setelah step 3 menyebabkan kehilangan dana.</li><li><strong>Durability</strong>: Perubahan setelah transaksi selesai harus bertahan meski ada kegagalan sistem.</li><li><strong>Consistency</strong>: Jumlah A + B tetap, termasuk batasan integritas eksplisit (kunci utama, kunci asing) dan implisit (misalnya, total saldo akun).</li><li><strong>Isolation</strong>: Transaksi lain tidak boleh melihat data yang belum selesai; bisa dijamin dengan eksekusi berurutan.</li></ul><h3 id="seluruh-tabel-perbandingan" tabindex="-1">Seluruh Tabel Perbandingan <a class="header-anchor" href="#seluruh-tabel-perbandingan" aria-label="Permalink to &quot;Seluruh Tabel Perbandingan&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Properti</th><th>Penjelasan</th></tr></thead><tbody><tr><td>Atomicity</td><td>Semua atau tidak ada operasi yang diterapkan.</td></tr><tr><td>Consistency</td><td>Menjaga konsistensi database selama eksekusi.</td></tr><tr><td>Isolation</td><td>Sembunyikan hasil sementara dari transaksi lain.</td></tr><tr><td>Durability</td><td>Perubahan tetap ada meski sistem gagal.</td></tr></tbody></table><h3 id="contoh-soal-latihan" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><strong>Soal</strong>: Jika transaksi transfer $100 dari A ke B gagal setelah write(A), apa yang terjadi pada database jika atomicity tidak dijaga? <ul><li><strong>Jawaban</strong>: Dana hilang dari A, database jadi inkonsisten karena B tidak bertambah.</li></ul></li><li><strong>Soal</strong>: Bagaimana cara memastikan isolation saat T1 transfer $50 dan T2 membaca A + B bersamaan? <ul><li><strong>Jawaban</strong>: Jalankan T1 dan T2 secara berurutan atau gunakan mekanisme kontrol konkurensi.</li></ul></li><li><strong>Soal</strong>: Jika total saldo A + B harus 1000 dan T1 mengurangi A sebesar 200 tanpa menambah B, apakah konsisten? <ul><li><strong>Jawaban</strong>: Tidak konsisten karena total A + B menjadi 800.</li></ul></li></ol><hr><h2 id="transaction-state" tabindex="-1">Transaction State <a class="header-anchor" href="#transaction-state" aria-label="Permalink to &quot;Transaction State&quot;">​</a></h2><ul><li><strong>Status</strong>: Active → Partially Committed → Committed, atau Active → Failed → Aborted.</li></ul><h2 id="concurrent-executions" tabindex="-1">Concurrent Executions <a class="header-anchor" href="#concurrent-executions" aria-label="Permalink to &quot;Concurrent Executions&quot;">​</a></h2><ul><li><strong>Keuntungan</strong>: Meningkatkan utilisasi prosesor/disk, throughput transaksi lebih baik, waktu respons rata-rata lebih cepat.</li><li><strong>Kontrol konkurensi</strong>: Mekanisme untuk menjamin isolasi.</li></ul><h3 id="contoh-soal-latihan-1" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan-1" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><strong>Soal</strong>: Apa yang terjadi jika dua transaksi aktif bersamaan tanpa kontrol konkurensi? <ul><li><strong>Jawaban</strong>: Bisa terjadi inkonsistensi data (misalnya, T2 membaca data sementara T1).</li></ul></li><li><strong>Soal</strong>: Bagaimana status transaksi berubah jika gagal di tengah proses? <ul><li><strong>Jawaban</strong>: Dari Active ke Failed, lalu ke Aborted.</li></ul></li><li><strong>Soal</strong>: Mengapa throughput meningkat dengan eksekusi bersamaan? <ul><li><strong>Jawaban</strong>: Utilisasi sumber daya lebih optimal.</li></ul></li></ol><hr><h2 id="serializability" tabindex="-1">Serializability <a class="header-anchor" href="#serializability" aria-label="Permalink to &quot;Serializability&quot;">​</a></h2><ul><li><strong>Definisi</strong>: Jadwal (schedule) bersamaan setara dengan jadwal berurutan jika mempertahankan konsistensi.</li><li><strong>Jenis</strong>: Conflict serializability (berdasarkan konflik read/write) dan view serializability (berdasarkan nilai yang dibaca).</li><li><strong>Tes</strong>: Gunakan graf presedensi; jika tidak bersepeda, jadwalnya serializable.</li></ul><h3 id="seluruh-tabel-perbandingan-1" tabindex="-1">Seluruh Tabel Perbandingan <a class="header-anchor" href="#seluruh-tabel-perbandingan-1" aria-label="Permalink to &quot;Seluruh Tabel Perbandingan&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Jenis</th><th>Kriteria</th><th>Tes</th></tr></thead><tbody><tr><td>Conflict Serializable</td><td>Berdasarkan konflik read/write</td><td>Graf presedensi tidak bersepeda</td></tr><tr><td>View Serializable</td><td>Berdasarkan nilai yang dibaca</td><td>Analisis ekivalensi mahal</td></tr></tbody></table><h3 id="contoh-soal-latihan-2" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan-2" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><strong>Soal</strong>: Apakah jadwal T1: read(A), write(A), T2: read(A), write(A) serializable? <ul><li><strong>Jawaban</strong>: Tidak, karena ada konflik write-write tanpa urutan yang jelas.</li></ul></li><li><strong>Soal</strong>: Jika T1 membaca nilai awal A dan T2 menulis A, apakah view serializable? <ul><li><strong>Jawaban</strong>: Ya, jika T1 tetap membaca nilai awal A di jadwal lain.</li></ul></li><li><strong>Soal</strong>: Bagaimana menguji serializability dari graf dengan simpul T1 → T2? <ul><li><strong>Jawaban</strong>: Graf tidak bersepeda, jadi jadwalnya conflict serializable.</li></ul></li></ol><hr><h2 id="recoverability" tabindex="-1">Recoverability <a class="header-anchor" href="#recoverability" aria-label="Permalink to &quot;Recoverability&quot;">​</a></h2><ul><li><strong>Recoverable</strong>: Commit T1 harus sebelum commit T2 jika T2 membaca data dari T1.</li><li><strong>Cascadeless</strong>: Commit T1 harus sebelum read T2 pada data yang ditulis T1 untuk hindari rollback berantai.</li></ul><h3 id="seluruh-tabel-perbandingan-2" tabindex="-1">Seluruh Tabel Perbandingan <a class="header-anchor" href="#seluruh-tabel-perbandingan-2" aria-label="Permalink to &quot;Seluruh Tabel Perbandingan&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Jenis</th><th>Kondisi</th></tr></thead><tbody><tr><td>Recoverable</td><td>Commit T1 sebelum commit T2 jika ada read.</td></tr><tr><td>Cascadeless</td><td>Commit T1 sebelum read T2 pada data ditulis.</td></tr></tbody></table><h3 id="contoh-soal-latihan-3" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan-3" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><strong>Soal</strong>: Jika T1 write(A) dan T2 read(A) lalu T1 abort, apakah jadwal recoverable? <ul><li><strong>Jawaban</strong>: Tidak, karena T2 membaca data yang belum commit.</li></ul></li><li><strong>Soal</strong>: Bagaimana mencegah rollback berantai? <ul><li><strong>Jawaban</strong>: Gunakan jadwal cascadeless dengan commit sebelum read.</li></ul></li><li><strong>Soal</strong>: Jika T1 commit setelah T2 read(A), apakah aman? <ul><li><strong>Jawaban</strong>: Ya, asalkan jadwalnya recoverable.</li></ul></li></ol><hr><h2 id="implementation-of-isolation" tabindex="-1">Implementation of Isolation <a class="header-anchor" href="#implementation-of-isolation" aria-label="Permalink to &quot;Implementation of Isolation&quot;">​</a></h2><ul><li><strong>Metode</strong>: Locking (shared/exclusive), timestamps (deteksi akses tidak berurutan), multiple versions (snapshot data).</li><li><strong>Level Konsistensi SQL-92</strong>: Serializable, repeatable read, read committed, read uncommitted.</li></ul><h3 id="seluruh-tabel-perbandingan-3" tabindex="-1">Seluruh Tabel Perbandingan <a class="header-anchor" href="#seluruh-tabel-perbandingan-3" aria-label="Permalink to &quot;Seluruh Tabel Perbandingan&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Level Konsistensi</th><th>Deskripsi</th></tr></thead><tbody><tr><td>Serializable</td><td>Paling ketat, default.</td></tr><tr><td>Repeatable Read</td><td>Membaca ulang harus sama.</td></tr><tr><td>Read Committed</td><td>Hanya data yang sudah commit bisa dibaca.</td></tr><tr><td>Read Uncommitted</td><td>Data belum commit bisa dibaca (dirty reads).</td></tr></tbody></table><h3 id="contoh-soal-latihan-4" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan-4" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><strong>Soal</strong>: Pada level read uncommitted, apa risiko membaca data? <ul><li><strong>Jawaban</strong>: Bisa membaca data kotor (dirty reads) jika transaksi lain rollback.</li></ul></li><li><strong>Soal</strong>: Mengapa repeatable read mencegah non-repeatable reads? <ul><li><strong>Jawaban</strong>: Nilai yang dibaca tetap sama selama transaksi.</li></ul></li><li><strong>Soal</strong>: Bagaimana locking memastikan isolasi? <ul><li><strong>Jawaban</strong>: Gunakan kunci shared untuk read dan exclusive untuk write.</li></ul></li></ol><hr><h2 id="transaction-definition-in-sql" tabindex="-1">Transaction Definition in SQL <a class="header-anchor" href="#transaction-definition-in-sql" aria-label="Permalink to &quot;Transaction Definition in SQL&quot;">​</a></h2><ul><li><strong>Awal</strong>: Otomatis (implisit).</li><li><strong>Akhir</strong>: Commit work atau rollback work; setiap pernyataan SQL commit otomatis.</li><li><strong>Isolasi</strong>: Bisa diatur di level database atau per transaksi.</li></ul><h3 id="contoh-soal-latihan-5" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan-5" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><strong>Soal</strong>: Bagaimana mengakhiri transaksi yang berhasil di SQL? <ul><li><strong>Jawaban</strong>: Gunakan perintah &quot;commit work&quot;.</li></ul></li><li><strong>Soal</strong>: Apa yang terjadi jika transaksi gagal dan tidak ada rollback? <ul><li><strong>Jawaban</strong>: Perubahan tidak disimpan, database tetap konsisten.</li></ul></li><li><strong>Soal</strong>: Bagaimana mengatur level isolasi di SQL? <ul><li><strong>Jawaban</strong>: Tetapkan level di awal transaksi (misalnya, set transaction isolation level).</li></ul></li></ol><hr><h2 id="daftar-istilah-penting" tabindex="-1">Daftar Istilah Penting <a class="header-anchor" href="#daftar-istilah-penting" aria-label="Permalink to &quot;Daftar Istilah Penting&quot;">​</a></h2><ul><li><strong>Transaksi</strong>: Satuan eksekusi program yang mengakses atau mengubah data.</li><li><strong>Atomicity</strong>: Semua operasi harus berhasil atau gagal bersama.</li><li><strong>Consistency</strong>: Menjaga aturan integritas database.</li><li><strong>Isolation</strong>: Menyembunyikan proses transaksi dari yang lain.</li><li><strong>Durability</strong>: Perubahan tetap meski sistem bermasalah.</li><li><strong>Schedule</strong>: Urutan eksekusi instruksi transaksi.</li><li><strong>Serializability</strong>: Kemampuan jadwal bersamaan setara dengan berurutan.</li><li><strong>Conflict Serializability</strong>: Berdasarkan konflik read/write.</li><li><strong>View Serializability</strong>: Berdasarkan nilai yang dibaca.</li><li><strong>Precedence Graph</strong>: Graf untuk menguji serializability.</li><li><strong>Recoverable</strong>: Commit transaksi sebelum yang membaca data.</li><li><strong>Cascadeless</strong>: Hindari rollback berantai dengan urutan commit.</li><li><strong>Concurrency Control</strong>: Mekanisme untuk isolasi transaksi.</li><li><strong>Dirty Reads</strong>: Membaca data belum commit.</li><li><strong>Non-repeatable Reads</strong>: Nilai berubah saat dibaca ulang.</li><li><strong>Phantom Reads</strong>: Munculnya data baru saat transaksi berjalan.</li></ul><h2 id="glossarium" tabindex="-1">Glossarium <a class="header-anchor" href="#glossarium" aria-label="Permalink to &quot;Glossarium&quot;">​</a></h2><ul><li><strong>ACID</strong>: Atomicity, Consistency, Isolation, Durability.</li></ul>',47)])])}const m=t(r,[["render",l]]);export{b as __pageData,m as default};
