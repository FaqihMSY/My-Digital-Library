import{_ as n,c as t,o as e,ae as i}from"./chunks/framework.BlRNOFgT.js";const k=JSON.parse('{"title":"IF3140 – Sistem Basis Data: Schema and Index Tuning","description":"","frontmatter":{},"headers":[],"relativePath":"system-database/schema-index-tuning.md","filePath":"system-database/schema-index-tuning.md"}'),r={name:"system-database/schema-index-tuning.md"};function o(s,a,l,d,u,g){return e(),t("div",null,[...a[0]||(a[0]=[i('<h1 id="if3140-–-sistem-basis-data-schema-and-index-tuning" tabindex="-1">IF3140 – Sistem Basis Data: Schema and Index Tuning <a class="header-anchor" href="#if3140-–-sistem-basis-data-schema-and-index-tuning" aria-label="Permalink to &quot;IF3140 – Sistem Basis Data: Schema and Index Tuning&quot;">​</a></h1><h2 id="higher-level-database-design-tuning" tabindex="-1">Higher-Level Database Design Tuning <a class="header-anchor" href="#higher-level-database-design-tuning" aria-label="Permalink to &quot;Higher-Level Database Design Tuning&quot;">​</a></h2><ul><li><strong>Tujuan utama</strong>: Memahami dan menyempurnakan skema konseptual serta eksternal setelah desain ER dan definisi views.</li><li><strong>Langkah berikutnya</strong>: Memilih indeks dan menyempurnakan skema untuk mencapai tujuan performa.</li><li><strong>Pemahaman workload</strong>: <ul><li>Identifikasi query dan update terpenting serta frekuensinya.</li><li>Tentukan performa yang diinginkan untuk query dan update tersebut.</li></ul></li></ul><h3 id="contoh-soal-latihan" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><p><strong>Soal</strong>: Sebuah perusahaan memiliki tabel &quot;Employee&quot; dengan kolom besar (nama, alamat, gaji, status). Bagaimana cara tuning skema untuk meningkatkan performa query yang hanya membutuhkan nama dan gaji?<br><strong>Jawaban</strong>: Gunakan <strong>vertical splitting</strong> dengan memisahkan kolom nama dan gaji ke tabel terpisah untuk mengurangi data yang dibaca.</p></li><li><p><strong>Soal</strong>: Jika sebuah tabel &quot;Sales&quot; berisi data historis dan terkini, bagaimana cara meningkatkan akses ke data terkini?<br><strong>Jawaban</strong>: Terapkan <strong>horizontal splitting</strong> dengan memisahkan data terkini ke tabel &quot;Active_Sales&quot; dan data historis ke &quot;Inactive_Sales&quot;.</p></li><li><p><strong>Soal</strong>: Perusahaan ingin mengurangi kebutuhan join pada tabel &quot;Order&quot; dan &quot;Customer&quot;. Apa solusi yang bisa digunakan?<br><strong>Jawaban</strong>: Lakukan <strong>denormalization</strong> dengan menambahkan kolom kunci seperti &quot;customer_name&quot; dari tabel &quot;Customer&quot; ke tabel &quot;Order&quot;.</p></li></ol><hr><h2 id="understanding-the-workload" tabindex="-1">Understanding the Workload <a class="header-anchor" href="#understanding-the-workload" aria-label="Permalink to &quot;Understanding the Workload&quot;">​</a></h2><ul><li><strong>Untuk setiap query</strong>: <ul><li>Relasi mana yang diakses?</li><li>Atribut mana yang diambil?</li><li>Atribut mana yang digunakan dalam kondisi seleksi/join? Seberapa selektif kondisi tersebut?</li></ul></li><li><strong>Untuk setiap update</strong>: <ul><li>Atribut mana yang terlibat dalam kondisi seleksi/join? Seberapa selektif?</li><li>Jenis update (INSERT/DELETE/UPDATE) dan atribut yang terpengaruh.</li></ul></li></ul><h3 id="contoh-soal-latihan-1" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan-1" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><p><strong>Soal</strong>: Sebuah query mengakses tabel &quot;Product&quot; dan &quot;Order&quot; untuk filter berdasarkan tanggal. Apa yang perlu dianalisis dari workload?<br><strong>Jawaban</strong>: Analisis relasi yang diakses (Product, Order), atribut yang difilter (tanggal), dan seberapa selektif kondisi tanggal.</p></li><li><p><strong>Soal</strong>: Update pada tabel &quot;Employee&quot; mengubah gaji berdasarkan departemen. Apa yang harus diperhatikan?<br><strong>Jawaban</strong>: Perhatikan atribut seleksi (departemen), jenis update (UPDATE), dan atribut yang terpengaruh (gaji).</p></li><li><p><strong>Soal</strong>: Bagaimana menentukan performa yang diinginkan untuk query mingguan?<br><strong>Jawaban</strong>: Tentukan waktu respons maksimum berdasarkan kebutuhan bisnis, misalnya &lt; 2 detik.</p></li></ol><hr><h2 id="decisions-to-make" tabindex="-1">Decisions to Make <a class="header-anchor" href="#decisions-to-make" aria-label="Permalink to &quot;Decisions to Make&quot;">​</a></h2><ul><li><strong>Indeks yang dibuat</strong>: <ul><li>Relasi mana yang perlu indeks? Field apa yang jadi kunci pencarian? Butuh beberapa indeks?</li></ul></li><li><strong>Jenis indeks</strong>: Clustered/non-clustered? Hash/B+-tree/Bitmap?</li><li><strong>Perubahan skema logis</strong>: <ul><li>Pertimbangkan skema ternormalisasi alternatif (BCNF, dll.).</li><li>Pertimbangkan denormalisasi atau partisi horizontal.</li></ul></li></ul><h3 id="seluruh-tabel-perbandingan" tabindex="-1">Seluruh Tabel Perbandingan <a class="header-anchor" href="#seluruh-tabel-perbandingan" aria-label="Permalink to &quot;Seluruh Tabel Perbandingan&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>Aspek</strong></th><th><strong>Clustered Index</strong></th><th><strong>Non-Clustered Index</strong></th></tr></thead><tbody><tr><td>Penempatan Fisik</td><td>Menentukan urutan fisik data</td><td>Terpisah dari data</td></tr><tr><td>Jumlah per Tabel</td><td>Maksimal 1</td><td>Maksimal 249</td></tr><tr><td>Kegunaan Utama</td><td>ORDER BY, GROUP BY, WHERE</td><td>Pencarian tunggal/range</td></tr></tbody></table><h3 id="contoh-soal-latihan-2" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan-2" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><p><strong>Soal</strong>: Sebuah tabel &quot;Student&quot; sering diurutkan berdasarkan NIM. Indeks apa yang cocok?<br><strong>Jawaban</strong>: Gunakan <strong>clustered index</strong> pada kolom NIM.</p></li><li><p><strong>Soal</strong>: Tabel &quot;Transaction&quot; perlu pencarian cepat berdasarkan ID. Jenis indeks apa yang digunakan?<br><strong>Jawaban</strong>: Gunakan <strong>non-clustered index</strong> pada kolom ID.</p></li><li><p><strong>Soal</strong>: Haruskah skema &quot;Order&quot; didenormalisasi jika join sering lambat?<br><strong>Jawaban</strong>: Ya, pertimbangkan <strong>denormalization</strong> dengan menambahkan kolom kunci dari tabel terkait.</p></li></ol><hr><h2 id="schema-tuning" tabindex="-1">Schema Tuning <a class="header-anchor" href="#schema-tuning" aria-label="Permalink to &quot;Schema Tuning&quot;">​</a></h2><ul><li><strong>Panduan skema logis</strong>: Berdasarkan workload, bukan hanya isu redundansi.</li><li><strong>Metode tuning</strong>: <ul><li><strong>Horizontal splitting</strong>: Pisahkan baris berdasarkan nilai kolom (misal: data aktif/inaktif).</li><li><strong>Vertical splitting</strong>: Pisahkan kolom yang sering/ jarang diakses.</li><li><strong>Denormalization</strong>: Tambah kolom redundan, atribut turunan, atau gabungkan tabel.</li></ul></li></ul><h3 id="seluruh-tabel-perbandingan-1" tabindex="-1">Seluruh Tabel Perbandingan <a class="header-anchor" href="#seluruh-tabel-perbandingan-1" aria-label="Permalink to &quot;Seluruh Tabel Perbandingan&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>Metode</strong></th><th><strong>Horizontal Splitting</strong></th><th><strong>Vertical Splitting</strong></th><th><strong>Denormalization</strong></th></tr></thead><tbody><tr><td>Fokus</td><td>Baris berdasarkan nilai</td><td>Kolom berdasarkan frekuensi</td><td>Redundansi untuk performa</td></tr><tr><td>Contoh Penggunaan</td><td>Aktif vs Inaktif data</td><td>Nama vs Alamat panjang</td><td>Tambah kolom turunan</td></tr><tr><td>Dampak</td><td>Kurangi ukuran tabel</td><td>Kurangi halaman dibaca</td><td>Kurangi join</td></tr></tbody></table><h3 id="contoh-soal-latihan-3" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan-3" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><p><strong>Soal</strong>: Tabel &quot;Customer&quot; besar dengan data lama. Bagaimana meningkatkan akses data baru?<br><strong>Jawaban</strong>: Gunakan <strong>horizontal splitting</strong> untuk memisahkan data baru dan lama.</p></li><li><p><strong>Soal</strong>: Tabel &quot;Product&quot; punya kolom deskripsi panjang yang jarang dibaca. Solusinya?<br><strong>Jawaban</strong>: Terapkan <strong>vertical splitting</strong> dengan memisahkan deskripsi ke tabel terpisah.</p></li><li><p><strong>Soal</strong>: Query sering join &quot;Sales&quot; dan &quot;Product&quot;. Bagaimana mempercepat?<br><strong>Jawaban</strong>: Lakukan <strong>denormalization</strong> dengan menambahkan kolom kunci &quot;product_name&quot; ke &quot;Sales&quot;.</p></li></ol><hr><h2 id="index-tuning" tabindex="-1">Index Tuning <a class="header-anchor" href="#index-tuning" aria-label="Permalink to &quot;Index Tuning&quot;">​</a></h2><ul><li><strong>Indeks utama (clustered)</strong>: Tentukan urutan fisik data, wajib untuk setiap tabel, cocok untuk ORDER BY, GROUP BY, WHERE.</li><li><strong>Indeks sekunder (non-clustered)</strong>: Berguna untuk pencarian tunggal/range, terpisah dari data.</li><li><strong>Pemilihan indeks</strong>: <ul><li>B+-tree untuk data dengan ulangan nilai rendah.</li><li>Hash untuk pencarian kesetaraan cepat.</li><li>Bitmap untuk data warehouse dengan ulangan nilai tinggi.</li></ul></li></ul><h3 id="seluruh-tabel-perbandingan-2" tabindex="-1">Seluruh Tabel Perbandingan <a class="header-anchor" href="#seluruh-tabel-perbandingan-2" aria-label="Permalink to &quot;Seluruh Tabel Perbandingan&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>Jenis Indeks</strong></th><th><strong>B+-tree</strong></th><th><strong>Hash</strong></th><th><strong>Bitmap</strong></th></tr></thead><tbody><tr><td>Kegunaan Utama</td><td>Akses cepat semua baris</td><td>Pencarian kesetaraan</td><td>Data dengan ulangan tinggi</td></tr><tr><td>Contoh Penggunaan</td><td>WHERE dengan rentang</td><td>WHERE = &#39;nilai&#39;</td><td>Sex (male/female)</td></tr><tr><td>Karakteristik</td><td>Default DBMS</td><td>Cepat untuk kesetaraan</td><td>Efisien untuk filter banyak</td></tr></tbody></table><h3 id="contoh-soal-latihan-4" tabindex="-1">Contoh Soal Latihan <a class="header-anchor" href="#contoh-soal-latihan-4" aria-label="Permalink to &quot;Contoh Soal Latihan&quot;">​</a></h3><ol><li><p><strong>Soal</strong>: Tabel &quot;Employee&quot; sering difilter berdasarkan gaji. Indeks apa yang cocok?<br><strong>Jawaban</strong>: Gunakan <strong>B+-tree index</strong> pada kolom gaji.</p></li><li><p><strong>Soal</strong>: Pencarian berdasarkan ID unik di tabel &quot;User&quot; lambat. Solusinya?<br><strong>Jawaban</strong>: Terapkan <strong>hash index</strong> pada kolom ID.</p></li><li><p><strong>Soal</strong>: Tabel &quot;Category&quot; punya kolom status (aktif/tidak) dengan filter banyak. Indeks apa?<br><strong>Jawaban</strong>: Gunakan <strong>bitmap index</strong> pada kolom status.</p></li></ol><hr><h2 id="daftar-istilah-penting" tabindex="-1">Daftar Istilah Penting <a class="header-anchor" href="#daftar-istilah-penting" aria-label="Permalink to &quot;Daftar Istilah Penting&quot;">​</a></h2><ul><li><strong>Schema Tuning</strong>: Proses menyempurnakan desain skema untuk meningkatkan performa database.</li><li><strong>Horizontal Splitting</strong>: Memisahkan baris tabel berdasarkan nilai kolom tertentu.</li><li><strong>Vertical Splitting</strong>: Memisahkan kolom tabel berdasarkan frekuensi akses.</li><li><strong>Denormalization</strong>: Menambahkan redundansi (kolom atau tabel) untuk mempercepat query.</li><li><strong>Clustered Index</strong>: Indeks yang menentukan urutan fisik data dalam tabel.</li><li><strong>Non-Clustered Index</strong>: Indeks terpisah yang mempercepat pencarian tanpa mengubah urutan data.</li><li><strong>B+-tree Index</strong>: Jenis indeks default untuk akses cepat pada rentang data.</li><li><strong>Hash Index</strong>: Indeks untuk pencarian cepat berdasarkan kesetaraan.</li><li><strong>Bitmap Index</strong>: Indeks efisien untuk data dengan ulangan nilai tinggi.</li><li><strong>Workload</strong>: Kumpulan query dan update yang mencerminkan penggunaan database.</li><li><strong>Materialized View</strong>: Tampilan data yang disimpan fisik untuk mempercepat query agregat.</li></ul><h3 id="glossarium" tabindex="-1">Glossarium <a class="header-anchor" href="#glossarium" aria-label="Permalink to &quot;Glossarium&quot;">​</a></h3><ul><li><strong>ER</strong>: Entity-Relationship (desain basis data).</li><li><strong>BCNF</strong>: Boyce-Codd Normal Form (bentuk normal data).</li><li><strong>3NF</strong>: Third Normal Form (bentuk normal data).</li><li><strong>DBMS</strong>: Database Management System (sistem manajemen basis data).</li><li><strong>OLTP</strong>: Online Transaction Processing (pengolahan transaksi online).</li><li><strong>DSS</strong>: Decision Support System (sistem pendukung keputusan).</li></ul>',36)])])}const m=n(r,[["render",o]]);export{k as __pageData,m as default};
